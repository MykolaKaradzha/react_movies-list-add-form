{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setTouched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","urlValidation","url","match","NewMovie","onAdd","count","validationError","initialFields","setFields","isDisabled","handleChange","newValue","elementName","state","onSubmit","preventDefault","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.800034ac.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { ChangeEvent, useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string, elementName: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generate a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const handleOnChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onChange(event.target.value, name);\n  };\n  // To show errors only if the field was touched (onBlur)\n\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={handleOnChange}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { FormEvent, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nconst urlValidation = (url: string) => {\n  // eslint-disable-next-line max-len\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  return url.match(pattern);\n};\n\ntype InitialFields = {\n  count: number;\n  title: string;\n  description: string;\n  imgUrl: string;\n  imdbUrl: string;\n  imdbId: string;\n  validationError: boolean;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [initialFields, setFields] = useState<InitialFields>({\n    count: 0,\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    validationError: false,\n  });\n\n  const isDisabled = !(\n    !!initialFields.title\n    && !!initialFields.imgUrl\n    && !!initialFields.imdbUrl\n    && !!initialFields.imdbId\n  );\n\n  const movie = {\n    title: initialFields.title,\n    description: initialFields.description,\n    imgUrl: initialFields.imgUrl,\n    imdbUrl: initialFields.imdbUrl,\n    imdbId: initialFields.imdbId,\n  };\n\n  const handleChange = (newValue: string, elementName: string) => {\n    setFields(state => ({\n      ...state,\n      [elementName]: newValue,\n    }));\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (\n      !(urlValidation(initialFields.imgUrl)\n        && urlValidation(initialFields.imdbUrl)\n      )) {\n      setFields(state => ({\n        ...state,\n        validationError: true,\n      }));\n\n      return;\n    }\n\n    onAdd(movie);\n    setFields(state => ({\n      count: state.count + 1,\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n      validationError: false,\n    }));\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={initialFields.count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={initialFields.title}\n        onChange={handleChange}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={initialFields.description}\n        onChange={handleChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={initialFields.imgUrl}\n        onChange={handleChange}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        value={initialFields.imdbUrl}\n        onChange={handleChange}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        value={initialFields.imdbId}\n        onChange={handleChange}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isDisabled}\n          >\n            Add\n          </button>\n          {initialFields.validationError && (\n            <p className=\"help is-danger\"> Your url is not valid!</p>)}\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n  const addMovie = (movie: Movie) => {\n    setMovies(\n      state => (\n        [\n          ...state,\n          movie,\n        ]\n      ),\n    );\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}